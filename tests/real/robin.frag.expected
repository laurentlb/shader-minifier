#define SUN_COLOUR vec3(1.,.76,.6)

vec4 animParts,body;
vec2 zoomTurn;
vec4 aStack[2],dStack[2];
vec3 CubeMap(samplerCube sam,vec3 v,float size)
{
  float M=max(max(abs(v.x),abs(v.y)),abs(v.z));
  size=(float(size)-1.)/float(size);
  if(abs(v.x)!=M)
    v.x*=size;
  if(abs(v.y)!=M)
    v.y*=size;
  if(abs(v.z)!=M)
    v.z*=size;
  return texture(sam,v).xyz;
}
float Hash(float p)
{
  vec2 p2=fract(vec2(p*5.3983,p*5.4427));
  p2+=dot(p2.yx,p2.xy+vec2(21.5351,14.3137));
  return fract(p2.x*p2.y*95.4337);
}
float Hash(vec2 p)
{
  p=fract(p*vec2(5.3983,5.4427));
  p+=dot(p.yx,p.xy+vec2(21.5351,14.3137));
  return fract(p.x*p.y*95.4337);
}
float noise(vec3 x)
{
  vec3 p=floor(x),f=fract(x);
  f=f*f*(3.-2.*f);
  vec2 uv=textureLod(iChannel1,(p.xy+vec2(37,17)*p.z+f.xy+.5)/256.,0.).yx;
  return mix(uv.x,uv.y,f.z);
}
float fbm(vec3 p)
{
  float f=1.6*noise(p);
  p*=2.02;
  f+=.35*noise(p);
  p*=2.33;
  f+=.225*noise(p);
  p*=2.01;
  return f;
}
vec2 Rot2(vec2 p,float a)
{
  float si=sin(a);
  a=cos(a);
  return mat2(a,si,-si,a)*p;
}
float Noise(float n)
{
  float f=fract(n);
  n=floor(n);
  f=f*f*(3.-2.*f);
  return mix(Hash(n),Hash(n+1.),f);
}
float NoiseSlope(float n,float loc)
{
  float f=fract(n);
  n=floor(n);
  f=smoothstep(0.,loc,f);
  return mix(Hash(n),Hash(n+1.),f);
}
float Sphere(vec3 p,float s)
{
  return length(p)-s;
}
vec3 TexCube(vec3 p,vec3 n)
{
  vec3 x=texture(iChannel0,p.yz).xzy,y=texture(iChannel0,p.zx).xyz,z=texture(iChannel1,p.xy,2.).yyy;
  return(x*abs(n.x)+y*abs(n.y)+z*abs(n.z))/(abs(n.x)+abs(n.y)+abs(n.z))*.9;
}
float Cylinder(vec3 p,vec2 h)
{
  h=abs(vec2(length(p.xz),p.y))-h;
  return min(max(h.x,h.y),0.)+length(max(h,0.));
}
float Segment(vec3 p,vec3 a,vec3 b,float r1,float r2)
{
  p-=a;
  a=b-a;
  float h=clamp(dot(p,a)/dot(a,a),0.,1.);
  return length(p-a*h)-r1+r2*h;
}
float RoundBox(vec3 p,vec3 b)
{
  return length(max(abs(p)-b,0.))-.3;
}
float sMin(float a,float b,float k)
{
  float h=clamp(.5+.5*(b-a)/k,0.,1.);
  return mix(b,a,h)-k*h*(1.-h);
}
vec3 Colour(vec3 p,vec3 nor,out float spec)
{
  vec3 post=p;
  p.xz=Rot2(p.xz,zoomTurn.x);
  vec3 orig=p;
  p.y-=body.z;
  p.yz=Rot2(p.yz,body.x);
  vec3 mat=TexCube(p*.5,nor).zxy*.45;
  spec=0.;
  float d=sMin(RoundBox(p-vec3(0,-1.4,-.3),vec3(.3+.1*animParts.x,0,.1+.3*animParts.x)),Sphere(p-vec3(0,-.25,0),1.33),2.2);
  vec3 p2=p;
  p2.x=abs(p2.x);
  d=sMin(d,Segment(p2,vec3(1.5,-.2,1.7),vec3(1.5,-1,-1.6),.3,.3),.4);
  vec3 wing=vec3(.4,.32,.2)*texture(iChannel1,p2.zy*vec2(.05,.3)).x;
  mat=mix(wing*wing,mat,clamp(Segment(p2,vec3(1.3,.2,.2),vec3(1.5+body.y,-1,-1.6),.4,.4),0.,1.));
  wing=vec3(.4)*texture(iChannel1,p.zy*vec2(.05,.3)).x;
  mat=mix(wing*wing,mat,clamp(Segment(p2,vec3(.1,-.5,-1.5),vec3(.15,-1.2,-8),.2,.2),0.,1.));
  p2=p;
  p2.xy=Rot2(p2.xy,animParts.y);
  p2.zy=Rot2(p2.zy,animParts.z);
  d=sMin(d,Sphere(p2-vec3(0,1,1.4),.8),1.);
  float f=min(Sphere(p-vec3(0,-.9,2.1),1.5),Sphere(p2-vec3(0,.5,1.9),1.2));
  f+=fbm(p*20.)*.2;
  f=max(f,-Sphere(p2-vec3(0,2,1.2),1.1));
  mat=mix(mat,vec3(.4,.1,0)*(.8+fbm(p*12.)*.2),clamp((d-f)*3.-(1.-step(-3.,orig.y))*3.,0.,1.));
  if(d>Segment(p2-vec3(0,.9,2.5),vec3(0,0,-.4),vec3(0,animParts.w*.2,.4),.15,.1))
    spec=.2,mat=vec3(.02,.01,0);
  p2.x=abs(p2.x);
  if(Sphere(p2-vec3(.35,1.1,2.05),.11)<d)
    mat=vec3(0),spec=.25;
  wing=mix(vec3(.2),vec3(.05,.04,0),fbm(post*2.)*.5);
  wing=mix(wing,vec3(.05),abs(sin(length(post.xz-vec2(.2,.4))*34.))*abs(nor.y));
  mat=mix(wing,mat,step(-3.4,post.y));
  orig.y-=body.w;
  orig.x=abs(orig.x);
  f=1.-clamp(Segment(orig,vec3(.5,-2.-body.z,-.5),vec3(.8,-3.5,.6),.53,.03)+(1.-step(-3.5,orig.y))*50.,0.,1.);
  mat=mix(mat,vec3(.05,.02,.02),f);
  spec=mix(spec,.1,f);
  return mat;
}
float Map(vec3 p)
{
  float d;
  vec3 post=p;
  p.xz=Rot2(p.xz,zoomTurn.x);
  vec3 o=p;
  p.y-=body.z;
  p.yz=Rot2(p.yz,body.x);
  d=sMin(RoundBox(p-vec3(0,-1.4,-.3),vec3(.3+.1*animParts.x,0,.1+.3*animParts.x)),Sphere(p-vec3(0,-.25,0),1.33),2.2);
  vec3 p2=p;
  p2.x=abs(p2.x);
  d=sMin(sMin(d,Segment(p2,vec3(1.3,.2,.2),vec3(1.5+body.y,-.5,-1.6),.2,.2),.4),Segment(p2,vec3(.6,-.5,-1.5),vec3(.15,-1.2,-8),.2,.2),2.4);
  p.xy=Rot2(p.xy,animParts.y);
  p.zy=Rot2(p.zy,animParts.z);
  d=sMin(sMin(sMin(d,Sphere(p-vec3(0,1,1.4),.8),1.),Segment(p-vec3(0,1,2.5),vec3(0,0,-.4),vec3(0,animParts.w*.2,.15),.1,.096),.2),Segment(p-vec3(0,1.05,2.5),vec3(0,-animParts.w*.25,-1.5),vec3(0,-animParts.w,.16),.1,.1),.05);
  p.x=abs(p.x);
  d=min(d,Sphere(p-vec3(.35,1.1,2.05),.11));
  d=min(d,Cylinder(post-vec3(.2,-12,.4),vec2(1.8,8.5)-fbm(post*5.)*.1));
  o.x=abs(o.x);
  o.y-=body.w;
  return min(min(min(min(d,Segment(o,vec3(.5,-2.+body.z+body.w,-.5),vec3(.8,-3.5,.5),.09,.1)),Segment(o,vec3(.8,-3.5,.5),vec3(.8,-3.5,1.2),.04,.04)),Segment(o,vec3(.8,-3.5,.5),vec3(1.4,-3.5,.8),.04,.04)),Segment(o,vec3(.8,-3.5,.5),vec3(.1,-3.5,.8),.04,.04));
}
float Shadow(vec3 ro,vec3 rd)
{
  float res=1.,t=.01,h;
  for(int i=0;i<8;i++)
    h=Map(ro+rd*t),res=min(2.5*h/t,res),t+=h*.5+.05;
  return max(res,0.);
}
vec3 DoLighting(vec3 mat,vec3 pos,vec3 normal,vec3 eyeDir,float d,float specular)
{
  vec3 sunLight=normalize(vec3(-.1,.4,.3));
  float sh=Shadow(pos,sunLight);
  vec3 col=mat*SUN_COLOUR*max(dot(sunLight,normal),0.)*sh+mat*CubeMap(iChannel3,normal,64.)*.5;
  normal=reflect(eyeDir,normal);
  return col+max(dot(sunLight,normal),0.)*SUN_COLOUR*texture(iChannel3,normal).xyz*specular*sh;
}
float Scene(vec3 rO,vec3 rD,vec2 fragCoord)
{
  float t=2.+.1*Hash(fragCoord.xy*fract(iTime)),alphaAcc=0.;
  vec3 p=vec3(0);
  int hits=0;
  for(int j=0;j<40;j++)
    {
      if(hits==8||alphaAcc>=1.||t>45.)
        break;
      p=rO+t*rD;
      float sphereR=t*.012,h=Map(p);
      if(h<sphereR)
        {
          float alpha=max((1.-alphaAcc)*min((sphereR-h)/sphereR,1.),0.);
          aStack[1].yzw=aStack[1].xyz;
          aStack[1].x=aStack[0].w;
          aStack[0].yzw=aStack[0].xyz;
          aStack[0].x=alpha;
          dStack[1].yzw=dStack[1].xyz;
          dStack[1].x=dStack[0].w;
          dStack[0].yzw=dStack[0].xyz;
          dStack[0].x=t;
          alphaAcc+=alpha;
          hits++;
        }
      t+=h*.8;
    }
  return clamp(alphaAcc,0.,1.);
}
vec3 PostEffects(vec3 rgb,vec2 xy)
{
  rgb=sqrt(rgb);
  
#define CONTRAST 1.1

  
#define SATURATION 1.2

  
#define BRIGHTNESS 1.15

  rgb=mix(vec3(.5),mix(vec3(dot(vec3(.2125,.7154,.0721),rgb*BRIGHTNESS)),rgb*BRIGHTNESS,SATURATION),CONTRAST)*(.5+.5*pow(1e2*xy.x*xy.y*(1.-xy.x)*(1.-xy.y),.4));
  return clamp(rgb,0.,1.);
}
vec3 CameraPath(float t)
{
  t+=5.;
  return vec3(1.4+sin(t)*3.5,-.2,5.-sin(t)*2.5);
}
float TweetVolume(float t)
{
  float n=NoiseSlope(t*11.,.1)*abs(sin(t*14.))*.5;
  return n*smoothstep(.4,.9,NoiseSlope(t*.5+4.,.1));
}
void mainImage(out vec4 fragColor,vec2 fragCoord)
{
  float gTime=iTime;
  vec2 xy=fragCoord.xy/iResolution.xy,uv=(-1.+2.*xy)*vec2(iResolution.x/iResolution.y,1);
  float t=mod(gTime,40.);
  zoomTurn.y=smoothstep(6.,0.,t)+smoothstep(39.,40.,t);
  vec3 cameraPos=CameraPath(gTime*.2);
  cameraPos.z+=zoomTurn.y*8.;
  vec3 camTarget=vec3(Noise(gTime*1.9-30.)*.5-.25,Noise(gTime*2.)*.5-.3,0);
  camTarget=normalize(camTarget-cameraPos);
  vec3 cu=normalize(cross(camTarget,vec3(0,1,0)));
  camTarget=normalize(uv.x*cu+uv.y*cross(cu,camTarget)+(1.-zoomTurn.y*.4)*camTarget);
  animParts.x=Noise(gTime*2.)+1.;
  animParts.y=(NoiseSlope(gTime*1.2+sin(gTime*.3)*.7+.7,.05)-.5)*1.5;
  animParts.z=NoiseSlope(gTime*.4-33.,.05)*.5;
  animParts.w=TweetVolume(gTime)*.8+.02;
  body.x=sin(NoiseSlope(gTime*.5,.3)*4.14)*.25+.25;
  body.y=NoiseSlope(gTime*.73,.3);
  t=mod(gTime*2.,15.);
  body.z=-smoothstep(0.,.5,t)*smoothstep(.6,.5,t)*.5;
  animParts.z-=body.z;
  body.y=body.z;
  float jump=smoothstep(.4,.6,t)*smoothstep(.8,.6,t)*.8;
  body.z+=jump;
  body.w=jump;
  zoomTurn.x=smoothstep(.4,.8,t);
  if(mod(gTime*2.,30.)>=15.)
    zoomTurn.x=1.-zoomTurn.x;
  cu=vec3(0);
  for(int i=0;i<2;i++)
    dStack[i]=vec4(-20),aStack[i]=vec4(0);
  jump=Scene(cameraPos,camTarget,fragCoord);
  for(int s=0;s<2;s++)
    for(int i=0;i<4;i++)
      {
        float specular=0.,d=dStack[s][i];
        if(d<0.)
          continue;
        vec3 pos=cameraPos+camTarget*d,normal=normalize(vec3(Map(pos+vec3(.01,0,0))-Map(pos-vec3(.01,0,0)),Map(pos+vec3(0,.01,0))-Map(pos-vec3(0,.01,0)),Map(pos+vec3(0,0,.01))-Map(pos-vec3(0,0,.01)))),alb=Colour(pos,normal,specular);
        cu+=DoLighting(alb,pos,normal,camTarget,d,specular)*aStack[s][i];
      }
  t=smoothstep(1.9,0.,zoomTurn.y);
  camTarget=mix(CubeMap(iChannel2,camTarget,128.),CubeMap(iChannel3,camTarget,64.)*.7,t);
  cu+=camTarget*camTarget*SUN_COLOUR*(1.-jump);
  cu=PostEffects(cu,xy)*smoothstep(0.,2.,iTime);
  fragColor=vec4(cu,1);
}
