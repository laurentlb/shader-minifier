#extension GL_EXT_gpu_shader4:enable

uniform vec2 resolution;
uniform float time;
vec4 Y;
vec2 p;
vec3 spherePos,lightDir,lightColor,waterColor,ro,rd,interlacing;
float sphereRadius,gf_DetailLevel,pi,eps,bigeps;
float rnd(vec2 x)
{
  int n=int(x.x*40.+x.y*64e2);
  n^=n<<13;
  return 1.-float(n*(n*n*15731+789221)+1376312589&2147483647)/1073741824.;
}
float smoothrnd(vec2 x)
{
  x=mod(x,1e3);
  vec2 a=fract(x);
  x-=a;
  a=a*a*(3.-2.*a);
  return mix(mix(rnd(x+vec2(0)),rnd(x+vec2(1,0)),a.x),mix(rnd(x+vec2(0,1)),rnd(x+vec2(1)),a.x),a.y);
}
float norm(float x)
{
  return x*.5+.5;
}
float caustic(float u,float v,float t)
{
  u=(norm(sin(pi*2.*(u+v+Y.y*t)))+norm(sin(pi*(v-u-Y.y*t)))+norm(sin(pi*(v+Y.y*t)))+norm(sin(pi*3.*(u-Y.y*t))))*.3;
  return pow(u,2.);
}
vec3 pp(vec3 color)
{
  int c=int(mod(gl_FragCoord.x,3.));
  if(c==0)
    color*=interlacing.xyz;
  if(c==1)
    color*=interlacing.yzx;
  if(c==2)
    color*=interlacing.zxy;
  return mix(color,vec3(norm(smoothrnd(p*333.+rnd(vec2(Y.y))*33333.))),Y.x*.3+.03);
}
vec3 godrays(vec3 color)
{
  vec2 dpos=p*2.-1.;
  float g=dpos.x*(dpos.y+3.);
  return color+lightColor*caustic(g+50.*ro.x,g+50.*ro.z,1.5)*norm(dpos.y)*min(-ro.y*30.,.3);
}
float height(vec2 x)
{
  return-.035+pow(caustic(x.x*10.,x.y*10.,0.)*2.-1.,2.)*.05-(x.x-.1)*.2;
}
vec3 getTerrainNormal(vec3 p)
{
  return normalize(vec3(height(p.xz-vec2(bigeps,0))-height(p.xz+vec2(bigeps,0)),2.*bigeps,height(p.xz-vec2(0,bigeps))-height(p.xz+vec2(0,bigeps))));
}
vec3 diffuseLight(vec3 incolor,vec3 normal)
{
  return(.3+.7*max(dot(normal,lightDir),0.))*lightColor*incolor;
}
vec3 getWaterNormal(vec3 p)
{
  return normalize(vec3(caustic(p.x*160.-cos(p.z*10.)*12.,p.z*140.,4.),8,caustic(p.z*160.-sin(p.x*10.)*12.,p.x*140.,4.))*2.-1.);
}
vec3 shadeTerrain(vec3 p,vec3 rd)
{
  rd=getTerrainNormal(p);
  vec3 color=mix(vec3(.66,.55,.4)-.2*smoothrnd(abs(p.xz*150.))-.2*smoothrnd(abs(p.yy+.002*smoothrnd(abs(p.xz*150.)))*3e3),vec3(.1,.3,0)*(smoothrnd(p.xz*7e3)*.4+.5),clamp(rd.y*(caustic(p.x*111.,p.z*111.,0.)*.5-p.y*40.),0.,1.));
  if(p.y<=0.)
    color+=5.*getWaterNormal(.8*p).x*min(.3,-p.y*8.);
  return diffuseLight(color,rd);
}
vec3 shadeSky(vec3 ro,vec3 rd)
{
  return ro.y<=-eps*eps?
    waterColor:
    (1.+Y.z*.3)*mix(vec3(-.5,-.25,0),vec3(2),1.-rd.y*.5-.5);
}
vec3 shadeAttractor(vec3 p,vec3 rd)
{
  vec3 n,color;
  n=normalize(p-spherePos);
  vec2 uv=.5+.5*vec2(atan(n.z,n.x),acos(n.y))/pi;
  uv.x-=Y.y;
  color=mix(vec3(1),vec3(1,0,0),mod(step(fract(uv.x*6.),.5)+step(fract(uv.y*6.),.5),2.));
  return diffuseLight(color,n)+pow(max(dot(n,normalize(lightDir-rd)),0.),33.)*lightColor;
}
float traceTerrain(vec3 ro,vec3 rd,float maxt)
{
  float delt,lh,ly,samplePosY;
  delt=0.;
  for(float t=0.;t<maxt;t+=delt)
    {
      ro+=rd*delt;
      samplePosY=ro.y;
      float h=height(ro.xz);
      if(samplePosY<=h)
        return t-delt+delt*(lh-ly)/(samplePosY-h+lh-ly);
      lh=h;
      ly=samplePosY;
      delt=.002+t/gf_DetailLevel;
    }
  return 9.;
}
float traceAttractor(vec3 ro,vec3 rd)
{
  ro-=spherePos;
  float B,D;
  B=dot(ro,rd);
  if(B>0.)
    return 9.;
  D=B*B-dot(ro,ro)+sphereRadius*sphereRadius;
  return D>0.?
    -B-sqrt(D):
    9.;
}
float traceWater(vec3 ro,vec3 rd)
{
  float tPlane=-ro.y/rd.y;
  return tPlane>=eps?
    tPlane:
    9.;
}
vec4 traceRay(vec3 ro,vec3 rd,int ignore)
{
  float water,attractor,terrain,minDist;
  water=ignore!=2?
    traceWater(ro,rd):
    9.;
  attractor=ignore!=3?
    traceAttractor(ro,rd):
    9.;
  terrain=ignore!=1?
    traceTerrain(ro,rd,min(.5,.002+min(water,attractor))):
    9.;
  gf_DetailLevel/=20.;
  minDist=min(terrain,min(water,min(attractor,9.)));
  if(minDist==9.)
    return vec4(0);
  ro+=rd*minDist;
  if(minDist==terrain)
    return vec4(ro,1);
  if(minDist==water)
    return vec4(ro,2);
  if(minDist==attractor)
    return vec4(ro,3);
}
vec3 shade(vec4 hitPoint,vec3 newRo,vec3 rd)
{
  vec3 myFog=newRo.y<eps?
    waterColor:
    shadeSky(ro,rd);
  float distance=clamp(length(hitPoint.xyz-newRo)*(ro.y<=0.?
    4.:
    2.),0.,1.);
  return hitPoint.w==1.?
    mix(shadeTerrain(hitPoint.xyz,rd),myFog,distance):
    hitPoint.w==2.?
      mix(waterColor,myFog,distance):
      hitPoint.w==3.?
        mix(shadeAttractor(hitPoint.xyz,rd),myFog,distance):
        myFog;
}
vec3 shadeWaterRefl(vec3 p,vec3 newrd)
{
  vec3 waterNormal=getWaterNormal(p);
  vec4 refracted=traceRay(p,refract(newrd,waterNormal,.9),2);
  float depth=clamp(pow(1.03*(1.-length(refracted.xyz-p)),16.),0.,1.);
  return mix(ro.y<0.?
    shadeSky(p,newrd):
    waterColor,mix(shade(traceRay(p,reflect(newrd,waterNormal),2),p,newrd),shade(refracted,p,newrd),clamp(-rd.y+depth,0.,1.)),refracted.w==3.?
    .5:
    pow(depth,.5));
}
vec3 shadeRefl(vec4 hitPoint,vec3 newRo,vec3 rd)
{
  vec3 myFog=newRo.y<eps?
    waterColor:
    shadeSky(ro,rd);
  float distance=clamp(length(hitPoint.xyz-newRo)*(ro.y<=0.?
    4.:
    2.),0.,1.);
  return hitPoint.w==1.?
    mix(shadeTerrain(hitPoint.xyz,rd),myFog,distance):
    hitPoint.w==2.?
      mix(shadeWaterRefl(hitPoint.xyz,rd),myFog,distance):
      hitPoint.w==3.?
        mix(mix(shadeAttractor(hitPoint.xyz,rd),shade(traceRay(hitPoint.xyz,reflect(rd,normalize(hitPoint.xyz-spherePos)),3),hitPoint.xyz,rd),.5),myFog,distance):
        shadeSky(newRo,rd);
}
void main()
{
  Y.x=.5;
  Y.y=(mod(time,136.)+5.)*71./240.;
  Y.z=1.;
  Y.w=1.333;
  p=-1.+2.*gl_FragCoord.xy/resolution.xy;
  float angle=1.570796*Y.y-1.570796;
  mat4 mm=mat4(cos(angle),0.,sin(angle),0.,0.,1.,0.,0.,-sin(angle),0.,cos(angle),0.,0.,0.,0.,1.);
  gf_DetailLevel=1e2;
  pi=3.1416;
  interlacing=vec3(1.2,.9,.9);
  eps=1e-4;
  bigeps=.01;
  angle=10.;
  int scene=int(Y.y);
  rd=vec3(p.xy-.5,1);
  if(scene>22&&scene<27)
    angle=min(1.,sin((Y.y-23.)*pi*.25)*12.),ro=vec3(.12,.005,Y.y*.08),rd=vec3(mm*vec4(rd,1)),rd.y+=.1*cos(Y.y*4.);
  else if(scene>14&&scene<23)
    angle=min(1.,sin((Y.y-15.)*pi*.125)*24.),rd+=vec3(0,.1*cos(Y.y*4.),0),ro=vec3(.08,.01*sin(Y.y*4.)+.002,Y.y*.11);
  else
     ro=vec3(.1,.004,0)+vec3(.1,.005,20)*vec3(rnd(vec2(scene,angle++)),rnd(vec2(scene,angle++)),rnd(vec2(scene,angle++))),ro=mix(ro+vec3(.008)*vec3(rnd(vec2(scene,angle++)),rnd(vec2(scene,angle++)),rnd(vec2(scene,angle++))),ro+vec3(.008)*vec3(rnd(vec2(scene,angle++)),rnd(vec2(scene,angle++)),rnd(vec2(scene,angle++))),Y.y-float(scene)),ro.y+=height(ro.xz)+.02,ro+=.02*getTerrainNormal(ro),angle=min(1.,step(-28.,-Y.y)*sin((Y.y-float(scene))*pi)*3.);
  rd=normalize(rd);
  spherePos=scene>22&&scene<27?
    ro+.1*vec3(mm*vec4(0,0,1,1)):
    ro+.02*vec3(sin(Y.y),0,5.+cos(Y.y));
  spherePos.y+=.01+height(spherePos.xz);
  sphereRadius=scene<14?
    0.:
    bigeps*.5+bigeps*Y.z;
  spherePos+=2.*bigeps*getTerrainNormal(spherePos);
  lightDir=vec3(.58,.58,-.58);
  lightColor=vec3(1.2)+Y.z;
  waterColor=(1.+Y.z*.3)*vec3(.3,.33,.4);
  if(ro.y<=0.)
    gf_DetailLevel*=.75,lightColor*=.8;
  vec3 color=shadeRefl(traceRay(ro,rd,0),ro,rd);
  if(ro.y<=0.)
    color=godrays(color);
  gl_FragColor.xyz=pp(step(2.,Y.y)*angle*color);
  gl_FragColor.w=1.;
}
