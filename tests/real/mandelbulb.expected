// Generated with  (https://github.com/laurentlb/Shader_Minifier/)
#ifndef MANDELBULB_EXPECTED_
# define MANDELBULB_EXPECTED_

const char *mandelbulb_frag =
 "uniform vec2 resolution;"
 "uniform float time;"
 "bool f(vec3 v,vec3 f,out vec2 i)"
 "{"
   "vec4 t=vec4(0,0,0,1.25);"
   "vec3 y=v-t.xyz;"
   "float c=dot(y,f),e=c*c-dot(y,y)+t.w*t.w;"
   "if(e<0.)"
     "return false;"
   "e=sqrt(e);"
   "i.x=-c-e;"
   "i.y=-c+e;"
   "return true;"
 "}"
 "bool f(vec3 v,out float f,out vec4 y)"
 "{"
   "vec4 e=vec4(100);"
   "vec3 i=v;"
   "float t=dot(i,i);"
   "if(t>1e2)"
     "return f=.5*log(t)/pow(8.,0.),y=vec4(1),false;"
   "for(int x=1;x<7;x++)"
     "{"
       "\n#if 0\n"
       "float z=sqrt(dot(i,i)),o=acos(i.y/z),c=atan(i.x,i.z);"
       "z=pow(z,8.);"
       "o*=8.;"
       "c*=8.;"
       "i=v+z*vec3(sin(o)*sin(c),cos(o),sin(o)*cos(c));"
       "\n#else\n"
       "float n=i.x,s=n*n,d=s*s,a=i.y,l=a*a,m=i.z,w=m*m,g=w*w,p=s+w,r=inversesqrt(p*p*p*p*p*p*p),C=d+l*l+g-6.*l*w-6.*s*l+2.*w*s,F=s-l+w;"
       "i.x=v.x+64.*n*a*m*(s-w)*F*(d-6.*s*w+g)*C*r;"
       "i.y=v.y+-16.*l*p*F*F+C*C;"
       "i.z=v.z+-8.*a*F*(d*d-28.*d*s*w+70.*d*g-28.*s*w*g+g*g)*C*r;"
       "\n#endif\n"
       "t=dot(i,i);"
       "e=min(e,vec4(i.xyz*i.xyz,t));"
       "if(t>1e2)"
         "return y=e,f=.5*log(t)/pow(8.,float(x)),false;"
     "}"
   "y=e;"
   "f=0.;"
   "return true;"
 "}"
 "bool f(vec3 v,vec3 s,out float y,out vec3 i,out vec4 t)"
 "{"
   "vec2 e;"
   "if(!f(v,s,e))"
     "return false;"
   "if(e.y<.001)"
     "return false;"
   "if(e.x<.001)"
     "e.x=.001;"
   "if(e.y>1e20)"
     "e.y=1e20;"
   "float c;"
   "vec3 x;"
   "vec4 o;"
   "float w=1./sqrt(2.);"
   "for(float p=e.x;p<e.y;)"
     "{"
       "vec3 z=v+s*p;"
       "float n=clamp(.001*p*w,1e-6,.005),d=n*.1;"
       "vec4 r;"
       "float l;"
       "if(f(z,l,o))"
         "return y=p,i=normalize(x),t=o,true;"
       "float m;"
       "f(z+vec3(d,0,0),m,r);"
       "float g;"
       "f(z+vec3(0,d,0),g,r);"
       "float C;"
       "f(z+vec3(0,0,d),C,r);"
       "x=vec3(m-l,g-l,C-l);"
       "c=.5*l*d/length(x);"
       "if(c<n)"
         "return t=o,i=normalize(x),y=p,true;"
       "p+=c;"
     "}"
   "return false;"
 "}"
 "void main()"
 "{"
   "vec2 i=-1.+2.*gl_FragCoord.xy/resolution.xy,e=i*vec2(1.33,1);"
   "vec3 v=vec3(.577);"
   "float y=1.4+.2*cos(6.28318*time/20.);"
   "vec3 c=vec3(y*sin(6.28318*time/20.),.3-.4*sin(6.28318*time/20.),y*cos(6.28318*time/20.)),s=normalize(vec3(0,.1,0)-c),t=normalize(cross(s,vec3(0,1,0))),p=normalize(e.x*t+e.y*normalize(cross(t,s))+1.5*s);"
   "vec4 o;"
   "if(f(c,p,y,t,o))"
     "{"
       "vec3 i=c+y*p;"
       "float e=clamp(.2+.8*dot(v,t),0.,1.);"
       "e*=e;"
       "float w=clamp(.3+.7*dot(vec3(-.707,0,.707),t),0.,1.),d=clamp(1.25*o.w-.4,0.,1.);"
       "d=d*d*.5+.5*d;"
       "float r;"
       "vec3 C;"
       "vec4 x;"
       "if(e>.001)"
         "if(f(i,v,r,C,x))"
           "e=.1;"
       "s=mix(mix(mix(vec3(1),vec3(.8,.6,.2),sqrt(o.x)*1.25),vec3(.8,.3,.3),sqrt(o.y)*1.25),vec3(.7,.4,.3),sqrt(o.z)*1.25)*((.5+.5*t.y)*vec3(.14,.15,.16)*.8+e*vec3(1,.85,.4)+.5*w*vec3(.08,.1,.14))*vec3(pow(d,.8),d,pow(d,1.1));"
       "s=1.5*(s*.15+.85*sqrt(s));"
     "}"
   "else"
     " s=1.3*vec3(1,.98,.9)*(.7+.3*p.y);"
   "i=i*.5+.5;"
   "s=clamp(s*(.7+4.8*i.x*i.y*(1.-i.x)*(1.-i.y)),0.,1.);"
   "gl_FragColor=vec4(s,1);"
 "}";

#endif // MANDELBULB_EXPECTED_
