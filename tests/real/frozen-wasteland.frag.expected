#define ITR 90

#define FAR 110.

#define time iTime

#define MOD3 vec3(.16532,.17369,.15787)

#define SUN_COLOUR vec3(1.,.95,.85)

#define TRIANGLE_NOISE

float height(vec2 p)
{
  float h=sin(p.x*.1+p.y*.2)+sin(p.y*.1-p.x*.2)*.5+sin(p.x*.04+p.y*.01+3.)*4.;
  return h-sin(h*10.)*.1;
}
float camHeight(vec2 p)
{
  return sin(p.x*.1+p.y*.2)+sin(p.y*.1-p.x*.2)*.5+sin(p.x*.04+p.y*.01+3.)*4.;
}
float smin(float a,float b)
{
  float h=clamp(.5+.5*(b-a)/2.7,0.,1.);
  return mix(b,a,h)-2.7*h*(1.-h);
}

#define MOD2 vec2(.16632,.17369)

#define MOD3 vec3(.16532,.17369,.15787)

float tri(float x)
{
  return abs(fract(x)-.5);
}
float hash12(vec2 p)
{
  p=fract(p*MOD2);
  p+=dot(p.xy,p.yx+19.19);
  return fract(p.x*p.y);
}
float vine(vec3 p,float c,float h)
{
  p.y+=sin(p.z*.5625+1.3)*3.5-.5;
  p.x+=cos(p.z*2.);
  vec2 q=vec2(mod(p.x,c)-c/2.,p.y);
  return length(q)-h*1.4-sin(p.z*3.+sin(p.x*7.)*.5)*.1;
}

#ifdef TRIANGLE_NOISE

float Noise3d(vec3 p)
{
  float z=1.4,rz=0.;
  vec3 bp=p;
  for(float i=0.;i<=2.;i++)
    {
      vec3 dg=vec3(tri(bp.z+tri(bp.y)),tri(bp.z+tri(bp.x)),tri(bp.y+tri(bp.x)));
      p+=dg;
      bp*=2.;
      z*=1.5;
      p*=1.3;
      rz+=tri(p.z+tri(p.x+tri(p.y)))/z;
      bp+=.14;
    }
  return rz;
}

#endif

#ifdef FOUR_D_NOISE

float Noise3d(vec3 q)
{
  float z=1.4;
  vec4 p=vec4(q,iTime*.1);
  float rz=0.;
  vec4 bp=p;
  for(float i=0.;i<=2.;i++)
    {
      vec4 dg=abs(fract(bp.yzwx+bp.wzxy)-.5);
      p+=dg;
      z*=1.5;
      p*=1.3;
      rz+=tri(p.z+tri(p.w+tri(p.y+tri(p.x))))/z;
      bp=bp.yxzw*2.+.14;
    }
  return rz;
}

#endif

#ifdef TEXTURE_NOISE

float Noise3d(vec3 x)
{
  x*=10.;
  float h=0.,a=.28;
  for(int i=0;i<4;i++)
    {
      vec3 p=floor(x),f=fract(x);
      f=f*f*(3.-2.*f);
      vec2 uv=textureLod(iChannel0,(p.xy+vec2(37,17)*p.z+f.xy+.5)/256.,0.).yx;
      h+=mix(uv.x,uv.y,f.z)*a;
      a*=.5;
      x+=x;
    }
  return h;
}

#endif

#ifdef VALUE_NOISE

float Hash(vec3 p)
{
  p=fract(p*MOD3);
  p+=dot(p.xyz,p.yzx+19.19);
  return fract(p.x*p.y*p.z);
}
float Noise3d(vec3 p)
{
  vec2 add=vec2(1,0);
  p*=10.;
  float h=0.,a=.3;
  for(int n=0;n<4;n++)
    {
      vec3 i=floor(p),f=fract(p);
      f*=f*(3.-2.*f);
      h+=mix(mix(mix(Hash(i),Hash(i+add.xyy),f.x),mix(Hash(i+add.yxy),Hash(i+add.xxy),f.x),f.y),mix(mix(Hash(i+add.yyx),Hash(i+add.xyx),f.x),mix(Hash(i+add.yxx),Hash(i+add.xxx),f.x),f.y),f.z)*a;
      a*=.5;
      p+=p;
    }
  return h;
}

#endif

float map(vec3 p)
{
  p.y+=height(p.zx);
  float d=smin(smin(p.y+.5,vine(p+vec3(.8,0,0),30.,3.3)),vine(p.zyx+vec3(0,0,17),33.,1.4));
  d+=Noise3d(p*.05)*(p.y*1.2);
  p.xz*=.3;
  return d+Noise3d(p*.3);
}
float fogmap(vec3 p,float d)
{
  p.xz-=time*7.+sin(p.z*.3)*3.;
  p.y-=time*.5;
  return max(Noise3d(p*.008+.1)-.1,0.)*Noise3d(p*.1)*.3;
}
float march(vec3 ro,vec3 rd,out float drift,vec2 scUV)
{
  float mul=.34,h,d=hash12(scUV)*1.5;
  drift=0.;
  for(int i=0;i<ITR;i++)
    {
      vec3 p=ro+rd*d;
      h=map(p);
      if(h<.1*(1.+d*.05)||d>FAR)
        break;
      drift+=fogmap(p,d);
      d+=h*mul;
      mul+=.004;
    }
  drift=min(drift,1.);
  return d;
}
vec3 normal(vec3 pos,float d)
{
  vec2 eps=vec2(d*d*.003+.01,0);
  vec3 nor=vec3(map(pos+eps.xyy)-map(pos-eps.xyy),map(pos+eps.yxy)-map(pos-eps.yxy),map(pos+eps.yyx)-map(pos-eps.yyx));
  return normalize(nor);
}
float bnoise(vec3 p)
{
  p.xz*=.4;
  float n=Noise3d(p*3.)*.4;
  n+=Noise3d(p*1.5)*.2;
  return n*n*.2;
}
vec3 bump(vec3 p,vec3 n,float ds)
{
  p.xz*=.4;
  vec2 e=vec2(.01,0);
  float n0=bnoise(p);
  vec3 d=vec3(bnoise(p+e.xyy)-n0,bnoise(p+e.yxy)-n0,bnoise(p+e.yyx)-n0)/e.x;
  return normalize(n-d*10./ds);
}
float shadow(vec3 ro,vec3 rd)
{
  float res=1.,t=.04;
  for(int i=0;i<12;i++)
    {
      float h=map(ro+rd*t);
      res=min(res,4.*h/t);
      t+=clamp(h,.1,1.5);
    }
  return clamp(res,0.,1.);
}
vec3 Clouds(vec3 sky,vec3 rd)
{
  rd.y=max(rd.y,0.);
  float ele=rd.y,v=2e2/(abs(rd.y)+.01);
  rd.y=v;
  rd.xz=rd.xz*v-time*8.;
  rd.xz*=4e-4;
  v=Noise3d(rd.xzz*3.)*Noise3d(rd.zxx*1.3)*2.5;
  v=clamp(v*pow(ele,.5)*2.-.15,.01,1.);
  return mix(sky,vec3(1),v);
}
vec3 Sky(vec3 rd,vec3 ligt)
{
  rd.y=max(rd.y,0.);
  vec3 sky=mix(vec3(.1,.15,.25),vec3(.8),pow(.8-rd.y,3.));
  return mix(sky,SUN_COLOUR,min(pow(max(dot(rd,ligt),0.),4.5)*1.2,1.));
}
float Occ(vec3 p)
{
  float h=clamp(map(p),.5,1.);
  return sqrt(h);
}
void mainImage(out vec4 fragColor,vec2 fragCoord)
{
  vec2 p=fragCoord.xy/iResolution.xy-.5,q=fragCoord.xy/iResolution.xy;
  p.x*=iResolution.x/iResolution.y;
  vec2 mo=iMouse.xy/iResolution.xy-.5;
  mo=mo==vec2(-.5)?
    mo=vec2(-.1,.07):
    mo;
  mo.x*=iResolution.x/iResolution.y;
  vec3 ro=vec3(smoothstep(0.,1.,tri(time*1.5)*.3)*1.5,smoothstep(0.,1.,tri(time*3.)*3.)*.08,-time*3.5-130.);
  ro.y-=camHeight(ro.zx)-.4;
  mo.x+=smoothstep(.7,1.,sin(time*.35))*.5-1.5-smoothstep(-.7,-1.,sin(time*.35))*.5;
  vec3 eyedir=normalize(vec3(cos(mo.x),mo.y*2.-.05+sin(time*.5)*.1,sin(mo.x))),rightdir=normalize(vec3(cos(mo.x+1.5708),0,sin(mo.x+1.5708)));
  rightdir=normalize(p.x*rightdir+p.y*normalize(cross(rightdir,eyedir))+eyedir);
  eyedir=normalize(vec3(1.5,.9,-.5));
  float fg,rz=march(ro,rightdir,fg,fragCoord);
  vec3 sky=Sky(rightdir,eyedir),col=sky;
  if(rz<FAR)
    {
      vec3 pos=ro+rz*rightdir,nor=normal(pos,rz);
      float d=length(pos-ro);
      nor=bump(pos,nor,d);
      float shd=shadow(pos,eyedir),dif=clamp(dot(nor,eyedir),0.,1.);
      vec3 ref=reflect(rightdir,nor);
      float fre=pow(clamp(1.+dot(rightdir,nor),0.,1.),3.);
      col=vec3(.75)*dif*shd+pow(clamp(dot(ref,eyedir),0.,1.),5.)*2.*fre*shd*SUN_COLOUR+abs(nor.y)*vec3(.12,.13,.13);
      d=Occ(pos+nor*3.);
      col=mix(col*vec3(d,d,min(d*1.2,1.)),sky,smoothstep(FAR-25.,FAR,rz));
    }
  else
     col=Clouds(col,rightdir);
  col=sqrt(mix(mix(col,vec3(.6,.65,.7),fg),vec3(.5),-.3));
  fg=smoothstep(0.,3.,iTime)*.5;
  col*=fg+fg*pow(70.*q.x*q.y*(1.-q.x)*(1.-q.y),.2);
  fragColor=vec4(col,1);
}
