int spointer;
vec3 sunLight;

#define SUN_COLOUR vec3(1.,.9,.8)

#define FOG_COLOUR vec3(1.,.7,.7)

struct Stack{vec3 pos;float alpha;float dist;int mat;};

#define STACK_SIZE 8

Stack stack[STACK_SIZE];
float getGroundHeight(vec2 p)
{
  return(sin(p.y*.23)+cos(p.x*.18))*.8;
}
vec3 getCamPos(float t)
{
  t+=140.;
  vec3 p=vec3(3.+50.*sin(t*.03),1.5,4.+50.*cos(t*.044));
  p.y-=getGroundHeight(p.xz);
  return p;
}
float hash11(float p)
{
  p=fract(p*.1031);
  p*=p+33.33;
  p*=p+p;
  return fract(p);
}
float hash12(vec2 p)
{
  vec3 p3=fract(vec3(p.xyx)*.1031);
  p3+=dot(p3,p3.yzx+33.33);
  return fract((p3.x+p3.y)*p3.z);
}
vec3 hash31(float p)
{
  vec3 p3=fract(vec3(p)*vec3(.1031,.103,.0973));
  p3+=dot(p3,p3.yzx+33.33);
  return fract((p3.xxy+p3.yzz)*p3.zyx);
}
vec3 hash33(vec3 p3)
{
  p3=fract(p3*vec3(.1031,.103,.0973));
  p3+=dot(p3,p3.yxz+33.33);
  return fract((p3.xxy+p3.yxx)*p3.zyx);
}
float randomTint(vec3 pos)
{
  float r=texture(iChannel1,pos.xz*.0027).x;
  return r+.5;
}
vec3 texCube(sampler2D sam,vec3 p,vec3 n)
{
  return(texture(sam,p.yz).xyz*abs(n.x)+texture(sam,p.zx).xyz*abs(n.y)+texture(sam,p.xy).xyz*abs(n.z))/(abs(n.x)+abs(n.y)+abs(n.z));
}
vec4 grassTexture(vec3 pos,vec3 nor)
{
  float g=texture(iChannel1,pos.xz*.5).x,s=texture(iChannel1,pos.xz*.015).x*.2;
  nor=texture(iChannel2,pos.xz*.15).xyz;
  float rand=texture(iChannel1,pos.xz*.003).x;
  rand*=rand*rand;
  nor=pow(nor,vec3(8,15,5))*10.*rand;
  vec4 mat=vec4(g*.05+s,g*.65,0,g*.1);
  mat.xyz+=nor;
  pos=fract(pos);
  mat=mix(mat,vec4(.2,0,0,0),smoothstep(.05,0.,min(pos.x,pos.z))+smoothstep(.95,1.,max(pos.x,pos.z)));
  return min(mat,1.);
}
vec4 barkTexture(vec3 p,vec3 nor)
{
  float br=texture(iChannel1,floor(p.xz/5.)*.02).x;
  vec3 mat=texCube(iChannel3,p*.4,nor)*vec3(.4,.3,.1*br)*br;
  mat+=texCube(iChannel3,p*.53,nor)*smoothstep(0.,.3,mat.x)*br;
  return vec4(mat,.1);
}
vec4 leavesTexture(vec3 p,vec3 nor)
{
  p=texCube(iChannel2,p*.15,nor);
  return vec4(vec3(.4,1.2,0)*p,0);
}
vec4 fruitTexture(vec3 p,vec3 nor,float i)
{
  float rand=texCube(iChannel2,p*.1,nor).x;
  return vec4(mix(vec3(0,1,0),vec3(1,abs(dot(nor,normalize(vec3(.8,.1,.1))))*rand,0),i/10.),.5);
}
float distanceRayPoint(vec3 ro,vec3 rd,vec3 p,out float h)
{
  h=dot(p-ro,rd);
  return length(p-ro-rd*h);
}

#define SIZE .03

vec3 floatingSeeds(vec3 ro,vec3 rd,float tmax)
{
  float d=0.;
  ro/=2.;
  vec3 pos=floor(ro),ri=1./rd,rs=sign(rd),dis=(pos-ro+.5+rs*.5)*ri;
  float dint;
  vec3 offset,id,col=vec3(0),sum=vec3(0);
  for(int i=0;i<8;i++)
    {
      id=hash33(pos);
      offset=clamp(id+.2*cos(id*iTime),SIZE,1.-SIZE);
      d=distanceRayPoint(ro,rd,pos+offset,dint);
      if(dint>0.&&dint*2.<tmax)
        col=vec3(.4)*smoothstep(SIZE,0.,d),sum+=col;
      vec3 mm=step(dis.xyz,dis.yxy)*step(dis.xyz,dis.zzx);
      dis+=mm*rs*ri;
      pos+=mm*rs;
    }
  return sum*.7;
}
float findClouds2D(vec2 p)
{
  float a=1.5,r=0.;
  p*=1e-6;
  for(int i=0;i<5;i++)
    r+=texture(iChannel1,p*=2.2).x*a,a*=.5;
  return max(r-1.5,0.);
}
vec4 getClouds(vec3 pos,vec3 dir)
{
  if(dir.y<0.)
    return vec4(0);
  vec2 p=pos.xz+dir.xz*(4e3/dir.y);
  float r=findClouds2D(p),t=findClouds2D(p+normalize(sunLight.xz)*30.);
  t=sqrt(max((r-t)*20.,.2))*2.;
  pos=vec3(t)*SUN_COLOUR;
  return vec4(pos,r);
}
vec2 map(vec3 p,float t)
{
  float matID,f;
  p.y+=getGroundHeight(p.xz);
  float num=floor(p.z/5.)*5.+floor(p.x/5.)*19.;
  p.xz=mod(p.xz,5.)-2.5;
  float d=p.y;
  matID=0.;
  float s=1.;
  vec3 w=normalize(vec3(-1.5+abs(hash11(num*4.)*.8),1,-1)),u=normalize(cross(w,vec3(0,1,0)));
  p/=3.5;
  vec3 q=p;
  int it=10-int(min(t*.03,9.));
  t=hash11(num*7.)*.3+.3;
  vec3 uwc=normalize(cross(u,w));
  int dontFold=int(hash11(num*23.)*9.)+3;
  float thick=.2/(t-.24);
  for(int i=0;i<it;i++)
    {
      f=3.5*max(p.y-t,max(-p.y,length(p.xz)-.06/(p.y+thick)))/s;
      if(f<=d)
        d=f,matID=1.;
      if(i!=dontFold)
        p.xz=abs(p.xz);
      p.y-=t;
      p=p*mat3(u,uwc,w)*1.6;
      s*=1.6;
    }
  f=(length(p)-.2)/s;
  if(f<=d)
    d=f,matID=2.;
  q.y-=t*1.84;
  t*=1.1;
  for(int i=0;i<it;i++)
    {
      p=normalize(hash31(num+float(i+19))-.5)*vec3(t,.1,t)+q;
      float ds=length(p)-.015;
      if(ds<=d)
        matID=3.+float(i),d=ds;
    }
  return vec2(d,matID);
}
float sphereRadius(float t)
{
  t=abs(t)*.003;
  return clamp(t,1./iResolution.y,3e3/iResolution.y);
}
float shadow(vec3 ro,vec3 rd,float dis)
{
  float res=1.,t=.1,h;
  for(int i=0;i<15;i++)
    {
      vec3 p=ro+rd*t;
      h=map(p,dis).x;
      res=min(3.*h/t,res);
      t+=h;
    }
  res+=t*t*.08;
  return clamp(res,.6,1.);
}
float calcOcc(vec3 pos,vec3 nor,float d)
{
  float occ=0.,sca=1.;
  for(float h=.05;h<.3;h+=.07)
    {
      vec3 opos=pos+h*nor;
      occ+=(h-map(opos,d).x)*sca;
      sca*=.95;
    }
  return clamp(1.-2.*occ,0.,1.);
}
float marchScene(vec3 rO,vec3 rD,vec2 co)
{
  float t=hash12(co)*.5;
  vec3 p;
  float alphaAcc=0.;
  spointer=0;
  for(int j=min(0,iFrame);j<140;j++)
    {
      if(spointer==STACK_SIZE||alphaAcc>=1.)
        break;
      p=rO+t*rD;
      float sphereR=sphereRadius(t);
      vec2 h=map(p,t);
      if(h.x<=sphereR)
        {
          float alpha=(1.-alphaAcc)*min((sphereR-h.x+.01)/sphereR,1.);
          stack[spointer].pos=p;
          stack[spointer].alpha=alpha;
          stack[spointer].dist=t;
          stack[spointer].mat=int(h.y);
          alphaAcc+=alpha;
          spointer++;
        }
      t+=h.x+t*.007;
    }
  return alphaAcc;
}
vec3 lighting(vec4 mat,vec3 pos,vec3 normal,vec3 eyeDir,float d)
{
  float sh=shadow(pos+sunLight*.01,sunLight,d),occ=calcOcc(pos,normal,d);
  vec3 col=mat.xyz*SUN_COLOUR*max(dot(sunLight,normal)*.5+.2,0.)*sh;
  float fre=clamp(1.+dot(normal,eyeDir),0.,1.)*.3,bac=clamp(.8*dot(normal,normalize(vec3(-sunLight.x,0,-sunLight.z))),0.,1.);
  normal=reflect(eyeDir,normal);
  col=col+pow(max(dot(sunLight,normal),0.),16.)*SUN_COLOUR*sh*mat.w*occ+bac*mat.xyz*occ+mat.xyz*abs(normal.y)*.3*occ+SUN_COLOUR*fre*.2*occ;
  return min(col,1.);
}
vec3 getNormal(vec3 pos,float ds)
{
  vec2 eps_zero=vec2(ds,0);
  return normalize(vec3(map(pos+eps_zero.xyy,0.).x,map(pos+eps_zero.yxy,0.).x,map(pos+eps_zero.yyx,0.))-map(pos,0.).x);
}
mat3 viewMat(float ay,float az)
{
  vec2 o,ca,sa;
  o=vec2(ay,az);
  ca=cos(o);
  sa=sin(o);
  return mat3(ca.y,0.,-sa.y,0.,1.,0.,sa.y,0.,ca.y)*mat3(1.,0.,0.,0.,ca.x,-sa.x,0.,sa.x,ca.x);
}
void mainImage(out vec4 fragColour,vec2 fragCoord)
{
  vec2 mouseXY=iMouse.xy/iResolution.xy,uv=(-iResolution.xy+2.*fragCoord)/iResolution.y;
  sunLight=normalize(vec3(-.8,1.8,-1.5));
  float time=iTime+mouseXY.x*10.;
  
#ifdef MOVE_CAMERA

  vec3 camera=getCamPos(time*.2);
  
#else

  vec3 camera=getCamPos(0.);
  
#endif

  vec3 rd=viewMat(uv.y+sin(time*.5)*.4,uv.x+time*.5)*normalize(vec3(0,0,1)),col=vec3(0),sky=mix(vec3(FOG_COLOUR),vec3(0,.4,.6),abs(rd.y));
  float alpha=marchScene(camera,rd,fragCoord);
  vec4 mat;
  if(alpha>0.)
    for(int i=0;i<spointer;i++)
      {
        vec3 pos=stack[i].pos;
        float d=stack[i].dist;
        vec3 nor=getNormal(pos,sphereRadius(d));
        int matID=stack[i].mat;
        mat=matID==0?
          grassTexture(pos,nor):
          matID==1?
            barkTexture(pos,nor):
            matID==2?
              leavesTexture(pos,nor):
              fruitTexture(pos,nor,float(matID-3));
        mat*=randomTint(pos);
        nor=lighting(mat,pos,nor,rd,d);
        if(matID==3)
          nor=nor*.4+vec3(.15,.01,0);
        nor=mix(sky,nor,exp(-d*.01));
        col+=nor*stack[i].alpha;
      }
  vec4 cc=getClouds(camera,rd);
  sky=mix(sky+pow(max(dot(sunLight,rd),0.),20.)*SUN_COLOUR*.03,cc.xyz,cc.w);
  col+=sky*(1.-alpha);
  float d=stack[0].dist;
  col+=floatingSeeds(camera,rd,d);
  col=clamp(col+pow(max(dot(sunLight,rd),0.),6.)*SUN_COLOUR*.2,0.,1.);
  col=col*col*(3.-2.*col);
  vec2 q=fragCoord/iResolution.xy;
  col=col*(.3+.7*pow(90.*q.x*q.y*(1.-q.x)*(1.-q.y),.5))*smoothstep(0.,5.,time);
  fragColour=vec4(sqrt(col),1);
}
