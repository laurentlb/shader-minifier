#define MIN_DIST 0.0015

#define MAX_DIST 64.0

#define MAX_STEPS 120.0

#define SHADOW_STEPS 30.0

float stretch,gunsUp,gunsForward,edWalk,edTwist,edDown,edShoot,doorOpen,glow;
struct MarchData{float d;vec3 mat;float specPower;};
mat2 rot(float a)
{
  float c=cos(a);
  a=sin(a);
  return mat2(c,a,-a,c);
}
float remap(float f,float in1,float in2,float out1,float out2)
{
  return mix(out1,out2,clamp((f-in1)/(in2-in1),0.,1.));
}
float sdBox(vec3 p,vec3 b)
{
  p=abs(p)-b;
  return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);
}
float sdChamferedCube(vec3 p,vec3 r)
{
  float cube=sdBox(p,r);
  p.xz*=rot(.78525);
  r.xz*=-.18/1.41+1.41;
  return max(cube,sdBox(p,r));
}
float sdTriPrism(vec3 p)
{
  vec2 h=vec2(.1,.5);
  vec3 q=abs(p);
  return max(q.z-h.y,max(q.x*.866025+p.y*.5,-p.y)-h.x*.5);
}
float sdCappedCone(vec3 p)
{
  vec3 b=vec3(0,0,-.1),a=vec3(0);
  float baba=dot(b-a,b-a),paba=dot(p-a,b-a)/baba,x=sqrt(dot(p-a,p-a)-paba*paba*baba),cax=max(0.,x-(paba<.5?
    .25:
    .35)),cay=abs(paba-.5)-.5,f=clamp((.1*(x-.25)+paba*baba)/(.01+baba),0.,1.);
  x=x-.25-f*.1;
  paba-=f;
  return(x<0.&&cay<0.?
    -1.:
    1.)*sqrt(min(cax*cax+cay*cay*baba,x*x+paba*paba*baba));
}
float sdCappedCylinder(vec3 p,float h,float r)
{
  vec2 d=abs(vec2(length(p.xy),p.z))-vec2(h,r);
  return min(max(d.x,d.y),0.)+length(max(d,0.));
}
float sdCapsule(vec3 p,vec3 a,vec3 b)
{
  p-=a;
  a=b-a;
  return length(p-a*clamp(dot(p,a)/dot(a,a),0.,1.))-.2;
}
float sdOctogon(vec2 p,float r)
{
  const vec3 k=vec3(-.9238795325,.3826834323,.4142135623);
  p=abs(p);
  p-=2.*min(dot(vec2(k),p),0.)*vec2(k);
  p-=2.*min(dot(vec2(-k.x,k.y),p),0.)*vec2(-k.x,k.y);
  p-=vec2(clamp(p.x,-k.z*r,k.z*r),r);
  return length(p)*sign(p.y);
}
vec3 getRayDir(vec3 ro,vec3 lookAt,vec2 uv)
{
  ro=normalize(lookAt-ro);
  lookAt=normalize(cross(vec3(0,1,0),ro));
  return normalize(ro+lookAt*uv.x+cross(ro,lookAt)*uv.y);
}
MarchData minResult(MarchData a,MarchData b)
{
  return a.d<b.d?
    a:
    b;
}
void setBodyMaterial(inout MarchData mat)
{
  mat.mat=vec3(.36,.45,.5);
  mat.specPower=30.;
}
float legWalkAngle(float f)
{
  return sin(edWalk*3.141*6.*f)*.2;
}
float edZ()
{
  return mix(5.,-2.,edWalk);
}
float fireShock()
{
  return abs(sin(edShoot*3.1415*25.));
}
MarchData headVisor(vec3 p,float h,float bump)
{
  bump*=sin(p.x*150.)*sin(p.y*150.)*.002;
  MarchData result;
  result.d=sdBox(p,vec3(1,h,2));
  result.d=max(mix(result.d,(length(p/vec3(1,.8,1))-1.)*.8,.57),-p.y)-bump;
  result.mat=vec3(.05);
  result.specPower=30.;
  return result;
}
MarchData headLower(vec3 p)
{
  vec3 op=p;
  MarchData r=headVisor(p*vec3(.95,-1.4,.95),1.,0.);
  float roof=max(max(headVisor((p+vec3(0,.01,0))*vec3(.95),1.,0.).d,p.y-.35),p.y*.625-p.z-.66);
  r.d=min(r.d,roof);
  p.xy*=rot(.075*(gunsUp-1.)*sign(p.x));
  p.x=abs(p.x)-1.33;
  p.y-=.1-p.x*.1;
  r.d=min(r.d,sdBox(p,vec3(.4,.06*(1.-p.x),.3-p.x*.2)));
  p=op;
  p.y=abs(abs(p.y+.147)-.0556)-.0278;
  r.d=max(r.d,-sdBox(p+vec3(0,0,1.5),vec3(mix(.25,.55,-op.y),.015,.1)));
  p=op;
  p.y=abs(p.y+.16)-.06;
  p.z-=-1.1;
  roof=max(max(sdCappedCylinder(p.xzy,1.,.03),-sdCappedCylinder(p.xzy,.55,1.)),p.z+.2);
  r.d=max(r.d,-roof);
  setBodyMaterial(r);
  return r;
}
MarchData gunPod(vec3 p)
{
  MarchData r;
  setBodyMaterial(r);
  p.yz+=vec2(.1,.45);
  vec3 pp=p;
  pp.z=abs(pp.z)-.5;
  r.d=sdCappedCone(pp);
  r.d=min(r.d,sdCappedCylinder(p,.35,.4));
  pp=vec3(p.x,.28-p.y,p.z);
  r.d=min(r.d,sdTriPrism(pp));
  pp=p;
  pp.x=abs(p.x);
  pp.xy*=rot(.78525);
  float bump=sign(sin(pp.z*33.3))*.003;
  bump=sdBox(pp,vec3(.1-bump,.38-bump,.34))-.02;
  pp=p-vec3(0,0,-.6);
  pp.x=abs(pp.x)-.1;
  bump=min(min(min(bump,sdCappedCylinder(pp,.06,.15)),sdCappedCylinder(pp+vec3(0,.12,-.05),.06,.05)),sdBox(p+vec3(0,0,.54),vec3(.1,.06,.04)));
  if(bump<r.d)
    bump=max(bump,-sdCappedCylinder(pp+vec3(0,0,.1),.03,.2)),r.d=bump,r.mat=vec3(.02);
  float fs=fireShock();
  if(fs>.5)
    {
      bump=sdCappedCylinder(pp,.01+pp.z*.05,fract(fs*3322.423)*.5+.9);
      if(bump<r.d)
        r.d=bump,r.mat=vec3(1),glow+=.1/(.01+bump*bump*4e2);
    }
  return r;
}
MarchData arms(vec3 p)
{
  MarchData r;
  setBodyMaterial(r);
  p.x=abs(p.x);
  p.yz+=vec2(.24,0);
  p.xy*=rot(.15*(gunsUp-1.));
  const vec3 elbow=vec3(1.5,0,0),wrist=elbow-vec3(0,0,.3);
  r.d=min(sdCapsule(p,vec3(0),elbow),sdCapsule(p,elbow,wrist));
  p-=wrist;
  p.z-=gunsForward*.15;
  return minResult(r,gunPod(p));
}
float toe(vec3 p)
{
  p.yz+=vec2(.1,.32);
  return max(sdBox(p,vec3(.3+.2*(p.z-.18)-p.y*.456*.5,.3+.2*cos((p.z-.18)*3.69),.35)),.1-p.y);
}
float foot(vec3 p)
{
  p.z+=.8;
  p.yz*=rot(.86);
  float d=toe(p);
  p.xz*=rot(1.57);
  p.x-=.43;
  p.z=.25-abs(p.z);
  return min(d,toe(p));
}
MarchData waist(vec3 p)
{
  MarchData r;
  setBodyMaterial(r);
  p.y+=.65;
  p.yz*=rot(-.2);
  float legAngle=legWalkAngle(1.);
  p.xy*=rot(legAngle*.3);
  vec3 pp=p;
  pp.y+=.3;
  r.d=max(sdCappedCylinder(pp.zyx,.5,.5),p.y+.15);
  float bump=.5-abs(sin(p.y*40.))*.03,d=sdBox(p,vec3(bump,.15,bump));
  bump=.3-abs(sin(p.x*40.))*.03;
  pp.y+=.18;
  d=min(d,sdCappedCylinder(pp.zyx,bump,.75));
  pp.x=abs(pp.x);
  pp.yz*=rot(-.58525+legAngle*sign(p.x));
  pp.x-=.98;
  r.d=min(r.d,max(sdCappedCylinder(pp.zyx,.4,.24),-pp.y));
  r.d=min(r.d,sdBox(pp,vec3(.24,.2,.14+.2*pp.y)));
  p=pp;
  pp.xz=abs(pp.xz)-vec2(.12,.25);
  bump=min(sdCappedCylinder(pp.xzy,.1,.325),sdCappedCylinder(pp.xzy,.05,.5));
  r.d=min(r.d,max(bump,pp.y));
  p.y+=.68;
  r.d=min(r.d,sdBox(p,vec3(sign(abs(p.y)-.04)*.005+.26,.2,.34)));
  if(d<r.d)
    r.d=d,r.mat=vec3(.02);
  return r;
}
MarchData legs(vec3 p)
{
  MarchData r;
  setBodyMaterial(r);
  float legAngle=legWalkAngle(1.);
  p.z+=.27;
  p.yz*=rot(legAngle*sign(p.x));
  p.z-=.27;
  p.y+=.65;
  p.yz*=rot(-.2);
  p.xy*=rot(legAngle*.3);
  vec3 pp=p;
  pp.x=abs(pp.x);
  pp.y+=.48;
  pp.yz*=rot(-.58525);
  pp.x-=.98;
  vec3 cp=pp;
  p=pp;
  pp.xz=abs(pp.xz)-vec2(.12,.25);
  p.y+=.68;
  p.xy=abs(p.xy)-.12;
  legAngle=sdBox(p,vec3(.07,.05,1.2));
  cp-=vec3(0,-.7,0);
  r.d=sdBox(cp-vec3(0,0,1.15),vec3(.17,.17,.07))-.04;
  cp.z+=1.;
  r.d=min(r.d,sdChamferedCube(cp.xzy,vec2(.28-sign(abs(cp.z)-.3)*.01,.5).xyx));
  r.d=min(r.d,foot(cp));
  if(legAngle<r.d)
    r.d=legAngle,r.mat=vec3(.8);
  return r;
}
MarchData ed209(vec3 p)
{
  p.yz+=vec2(legWalkAngle(2.)*.2+.1,-edZ());
  MarchData r=legs(p);
  float f=min(stretch*2.,1.);
  p.yz-=(f<.5?
    smoothstep(0.,.5,f):
    1.-smoothstep(.5,1.,f)*.2)*.5;
  gunsUp=smoothstep(0.,1.,clamp((stretch-.66)*6.,0.,1.));
  gunsForward=smoothstep(0.,1.,clamp((stretch-.83)*6.,0.,1.))+fireShock()*.5;
  r=minResult(r,waist(p));
  p.yz*=rot(.1*(-edDown+legWalkAngle(2.)+smoothstep(0.,1.,clamp((stretch-.5)*6.,0.,1.))-1.));
  p.xz*=rot(edTwist*.2);
  r=minResult(r,headLower(p));
  r=minResult(r,headVisor(p,.8,1.));
  return minResult(r,arms(p));
}
MarchData room(vec3 p)
{
  MarchData r;
  r.mat=vec3(.4);
  r.specPower=1e7;
  vec3 frameInner=vec3(2.8,2.6,.1);
  vec2 xy=p.xy-vec2(0,2);
  p.x=abs(p.x);
  p.yz+=vec2(.5,-3.4);
  float doorHole=sdBox(p,frameInner+vec3(0,0,1)),backWall=length(p.z-8.);
  r.d=min(backWall,max(length(p.z),-doorHole+.1));
  if(r.d==backWall)
    if(min(max(min(abs(sdOctogon(xy,2.6)),abs(sdOctogon(xy,1.9))),min(.7-abs(xy.x+1.2),-xy.y)),max(abs(sdOctogon(xy,1.2)),min(xy.x,.7-abs(xy.y))))<.3)
      r.mat=vec3(.39,.57,.71);
  doorHole=max(sdBox(p,frameInner+vec3(.4,.4,.1)),-doorHole);
  backWall=frameInner.x*.5;
  p.x-=frameInner.x;
  p.xz*=rot(doorOpen*2.1);
  p.x+=backWall;
  float door=sdBox(p,vec3(backWall,frameInner.yz));
  p=abs(p)-vec3(backWall*.5,1.1,.14);
  door=min(doorHole,max(door,-max(sdBox(p,vec3(.45,.9,.1)),-sdBox(p,vec3(.35,.8,1)))));
  if(door<r.d)
    r.d=door,r.mat=vec3(.02,.02,.024),r.specPower=10.;
  return r;
}
MarchData map(vec3 p)
{
  MarchData r=minResult(room(p),ed209(p));
  float gnd=length(p.y+3.);
  if(gnd<r.d)
    r.d=gnd,r.mat=vec3(.1);
  return r;
}
float calcShadow(vec3 p,vec3 lightPos)
{
  lightPos=normalize(lightPos-p);
  float res=1.,t=.1;
  for(float i=0.;i<SHADOW_STEPS;i++)
    {
      float h=map(p+lightPos*t).d;
      res=min(res,12.*h/t);
      t+=h;
      if(res<.001||t>25.)
        break;
    }
  return clamp(res,0.,1.);
}
vec3 calcNormal(vec3 p,float t)
{
  vec2 e=vec2(1,-1)*.5773*(.01*t*.33);
  return normalize(e.xyy*map(p+e.xyy).d+e.yyx*map(p+e.yyx).d+e.yxy*map(p+e.yxy).d+e.xxx*map(p+e.xxx).d);
}
vec3 vignette(vec3 col,vec2 fragCoord)
{
  fragCoord=fragCoord.xy/iResolution.xy;
  return col*(.5+.5*pow(16.*fragCoord.x*fragCoord.y*(1.-fragCoord.x)*(1.-fragCoord.y),.4));
}
vec3 applyLighting(vec3 p,vec3 rd,float d,MarchData data)
{
  const vec3 sunPos=vec3(10,10,-10);
  vec3 sunDir=normalize(sunPos-p),n=calcNormal(p,d);
  d=max(0.,dot(sunDir,n));
  d*=mix(.2,1.,calcShadow(p,sunPos));
  sunDir=((d+max(0.,dot(-sunDir,n))*.2)*(map(p+.33*n).d/.33)+pow(max(0.,dot(rd,reflect(sunDir,n))),data.specPower)*2.)*vec3(2,1.6,1.7);
  return mix(data.mat*sunDir,vec3(.01),smoothstep(.7,1.,1.+dot(rd,n)))*exp(-length(p)*.05);
}
vec3 getSceneColor(vec3 ro,vec3 rd)
{
  vec3 p;
  float d=.01;
  MarchData h;
  for(float steps=0.;steps<MAX_STEPS;steps++)
    {
      p=ro+rd*d;
      h=map(p);
      if(abs(h.d)<MIN_DIST*d)
        break;
      if(d>MAX_DIST)
        return vec3(0);
      d+=h.d;
    }
  float g=glow;
  return applyLighting(p,rd,d,h)+fireShock()*.3+g;
}
void mainImage(out vec4 fragColor,vec2 fragCoord)
{
  edWalk=1.;
  edTwist=0.;
  edDown=0.;
  edShoot=0.;
  doorOpen=1.;
  stretch=1.;
  vec3 ro,lookAt;
  float startScene,endScene,time=mod(iTime,55.);
  if(time<12.)
    startScene=0.,endScene=12.,edWalk=0.,ro=vec3(0,-1.5,-.625),lookAt=vec3(0,-1,edZ()),doorOpen=smoothstep(0.,1.,time/5.),stretch=remap(time,7.,10.,0.,1.);
  else if(time<25.)
    {
      startScene=12.;
      endScene=25.;
      float t=time-startScene;
      edWalk=smoothstep(0.,1.,remap(t,3.,8.,0.,1.));
      ro=vec3(-.5*cos(t*.7),.5-t*.1,edZ()-3.);
      lookAt=vec3(0,0,edZ());
    }
  else if(time<29.)
    {
      startScene=25.;
      endScene=29.;
      float t=time-startScene;
      ro=vec3(-2,.5+t*.1,edZ()-3.);
      lookAt=vec3(0,0,edZ());
    }
  else if(time<37.)
    {
      startScene=29.;
      endScene=37.;
      float t=time-startScene;
      ro=vec3(1.5,-1.-t*.05,edZ()-5.);
      lookAt=vec3(0,-1,edZ());
      stretch=remap(t,2.,5.,1.,0.);
    }
  else if(time<55.)
    {
      startScene=37.;
      endScene=55.;
      float t=time-startScene;
      ro=vec3(-1.8,-.5,edZ()-2.5);
      stretch=remap(t,2.,3.,0.,1.)-remap(t,11.5,14.5,0.,1.);
      lookAt=vec3(0,stretch*.5-.5,edZ());
      edTwist=remap(t,3.,3.2,0.,1.)*stretch;
      edDown=remap(t,3.2,3.4,0.,1.)*stretch;
      edShoot=t<=9.5?
        remap(t,4.,9.5,0.,1.):
        0.;
    }
  float dim=1.-cos(min(1.,2.*min(abs(time-startScene),abs(time-endScene)))*3.141/2.);
  vec3 col=vec3(0);
  
#ifdef AA

  for(float dx=0.;dx<=1.;dx++)
    for(float dy=0.;dy<=1.;dy++)
      {
        vec2 coord=fragCoord+vec2(dx,dy)*.5;
        
#else

        vec2 coord=fragCoord;
        
#endif

        coord+=(fract(fireShock()*vec2(23242.2323,978.23465))-.5)*10.;
        vec2 uv=(coord-.5*iResolution.xy)/iResolution.y;
        col+=getSceneColor(ro,getRayDir(ro,lookAt,uv));
        
#ifdef AA

      }
  col/=4.;
  
#endif

  fragColor=vec4(vignette(pow(col*dim,vec3(.4545)),fragCoord),1);
}
